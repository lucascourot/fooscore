# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    projection_dir: '%kernel.project_dir%/public/projections/'
    ranking_dir: '%kernel.project_dir%/public/ranking/'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            $projectionDir: '%projection_dir%'
            $rakingDir: '%ranking_dir%'

    _instanceof:
        Fooscore\Gaming\Match\DomainEvent:
            tags: ['fooscore_gaming_match.domain_event']

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    Fooscore\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    Fooscore\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    Fooscore\EventSubscriber\ApiExceptionSubscriber:
        arguments:
            $env: '%env(APP_ENV)%'

    Fooscore\Gaming\Infrastructure\MatchDetailsProjector:
        tags:
            - { name: kernel.event_listener, event: match_was_started, method: on }
            - { name: kernel.event_listener, event: goal_was_scored, method: on }
            - { name: kernel.event_listener, event: match_was_won, method: on }

    Fooscore\Gaming\Infrastructure\UpdateEloWhenMatchWonPolicy:
        tags:
            - { name: kernel.event_listener, event: match_was_won, method: on }
